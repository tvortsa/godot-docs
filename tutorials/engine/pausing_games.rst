.. _doc_pausing_games:

Пауза в игре
=============

Пауза?
------

В большинстве игр желательно, в какой-то момент, прервать игру
чтобы выполнить что-то другое, например перерыв или изменение параметров.
HНо это не так просто как может показаться. Игра может быть остановлена,
но некоторые меню и анимации возможно должны продолжать работать.

Реализация fine-grained управления тем что можно запаузить (а что нет)
это объемный труд, поэтому GoDot предоставляет простой фрэймворк для паузы.

How pausing worksThe game might be stopped


-----------------

Чтобы задать режим паузы, должно быть установлено "состояние паузы". Это можно сделать вызовом
:ref:`SceneTree.set_pause() <class_SceneTree_set_pause>`
с аргументом "true":

::

    get_tree().set_pause(true)

Это приведет к следующему поведению:

-  2D и 3D физика будет остановлена.
-  _process и _fixed_process больше не будут вызываться ни в каких узлах.
-  _input и _input_event больше не будет вызываться.

Это эффективный останов всей игры. Вызов этой функции из скрипта,
по умолчанию, приводит к невосстановимому состоянию (ничего больше не работает!).

Белый список узлов
-------------------

Перед активацией паузы, убедитесь что узлы, которые должны продолжать работать
и во время паузы - занесены в белый список. Это задается свойством "Pause Mode"
в узле:

.. image:: /img/pausemode.png

По умолчанию у всех узлов это свойство в значении "Inherit" state. Это
значит, что они будут (или не будут) продолжать работать в зависимости
от того какое значение этого свойства у родительского узла.
Если у родителя тоже "Inherit" , то надо смотреть у пра-родителя и т.д..
Наконец, если state не найден ни у кого из пра-родителей, используется
pause state в SceneTree.
Тоесть, по-умолчанию, если игра на паузе - каждый узел тоже будет поставлен
на паузу.

Таким образом возможно три состояния для узла:

-  **Inherit**: в зависимости от состояния родителя,
   пра-родителя, и т.п. The first parent that has a non-Inherit state.
-  **Stop**: Останавливается не зависимо от предка (и его потомки в Inherit
   режиме). При паузе этот узел останавливается.
-  **Process**: Продолжит работу (и его потомки в режиме Inherit).
    не зависимо от паузы игры.

Пример
-------

Примером этого является создание всплывающего окна или 
панели с элементами управления внутри,
задайте его режим паузы в "Process" а затем просто скройте его:

.. image:: /img/pause_popup.png

Просто установив root всплывающего окна в "Process", все потомки
будут наследовать это состояние. Таким образом, эта ветвь
scene tree будет продолжать работать даже при паузе.

Наконец, сделаем так чтобы при нажатии кнопки паузы 
(любая кнопка может ею быть),
активировалась пауза и отображался экран паузы.

::

    func _on_pause_button_pressed():
        get_tree().set_pause(true)
        get_node("pause_popup").show()

Для отмены паузы, сделайте обратное когда экран паузы зыкрывается:

::

    func _on_pause_popup_close_pressed():
        get_node("pause_popup").hide()
        get_tree().set_pause(false)

И это должно быть все!
