.. _doc_canvas_layers:

Слои холста
=============

Viewport и Canvas items
-----------------------

Обычные 2D узлы, такие как :ref:`Node2D <class_Node2D>` или
:ref:`Control <class_Control>` наследуют от
:ref:`CanvasItem <class_CanvasItem>`, который является основой для всех 2D
узлов. CanvasItems могут быть расположены в дереве и унаследовать его
трансформации. Это значит что при перемещении родителя, потомки будут так же
перемещаться.

Эти узлы размещаются как прямые или косвенные дочерние элементы во
:ref:`Viewport <class_Viewport>`, и будут отображаться через него.

Viewport имеет параметр "canvas_transform"
:ref:`Viewport.set_canvas_transform() <class_Viewport_set_canvas_transform>`,
который позволяет трансформировать всю иерархию CanvasItem через настройку
:ref:`Matrix32 <class_Matrix32>` трансформации. Такие узлы как
:ref:`Camera2D <class_Camera2D>`, работают меняя эти трансформации.

Трансформации canvas удобны поскольку это намного более эффективно чем
трансформации корневого элемента холста (и следовательно всей сцены).
Трансформации Canvas это простая матрица которая смещает всю 2D рисовку,
поэтому это самый эффективный способ сделать прокрутку.

Но этого не достаточно...
-------------------------

Но этого не достаточно. Часты ситуации когда игре или приложению не нужно
трансформировать *все* через canvas трансформации. Например:

-  **параллакс фона**: Когда фон движется медленнее чем остальная сцена.
-  **HUD**: "Нашлемный дисплей", или интерфейс пользователя. Если мир движется,
   то счетчик жизней, очков, и т.п. должен оставаться на месте.
-  **Transitions**: Эффекты используемые для переходов (fades, blends) могут
   также хотеть оставаться в фиксированном положении.

Как же решить эту проблемму в пределах одного дерева сцены??

CanvasLayers
------------

Ответ в :ref:`CanvasLayer <class_CanvasLayer>`,
Который является узлом который добавляет отдельный слой 2D рендеринга
для всех своих потомков. Viewport children по умолчанию отрисовываются
в слое "0", а CanvasLayer будет отрисовываться на слое с любым номером.
Слои с большим номером будут отрисовываться поверх слоев с меньшим номером.
CanvasLayers также имеет свои собственные трансформации, независящие
от трансформаций других слоев. Это позволяет UI быть зафиксированным на месте,
а всему остальному миру - двигаться.

Пример такого поведения - параллаксный фон. Его можно сделать если 
CanvasLayer в слое layer "-1". Экран с очками, счетчиком жизни и кнопкой паузы
можно создать на слое "1".

Вот диаграмма того как это выглядит:

.. image:: /img/canvaslayers.png

CanvasLayers не зависят от tree order, они зависят только от их номера
слоя, так что они могут быть инстанцированы когда нужно.

Производительность
------------------

Даже при том, что не должно быть никаких ограничений производительности, 
не рекомендуется использовать чрезмерное количество слоев для организации
отрисовки узлов. Самый оптимальный способ всегда будет упорядочивать их 
древовидно.
2d также имеют параметры для управления порядком их отрисовки.
(см. :ref:`Node2D.set_z() <class_Node2D_set_z>`).
