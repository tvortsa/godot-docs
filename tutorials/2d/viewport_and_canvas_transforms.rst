.. _doc_viewport_and_canvas_transforms:

Вьюпорт и трансформации холста
==============================

Введение
---------

Этот учебник создан после темы, которая является немного непонятной для
большинства, и раскрывает все 2D преобразования происходящие с узлами
от момента когда их содержимое отрисовано локально до до момента
когда они отрисованы на экране.

Трансформация холста
--------------------

Как упоминалось в прошлом уроке, :ref:`doc_canvas_layers`, каждый узел
CanvasItem (помните что базовые узлы Node2D и Control используют
CanvasItem как их общий корень)Будет находиться в *Canvas Layer*.
Каждый слой холста имеет трансформации (translation, rotation, scale, etc.) 
к которым можно получить доступ как к :ref:`Matrix32 <class_Matrix32>`.

Также рассмотрено в предыдущем руководстве, что узлы отрисовываются
по-умолчанию на слое Layer 0, встроенного canvas. Чтобы поместить узлы
на другой слой, используйте узел :ref:`CanvasLayer <class_CanvasLayer>`.

Трансформации глобального холста
--------------------------------

Вьюпорты также имеют глобальные трансформации холста (Global Canvas
transform (также :ref:`Matrix32 <class_Matrix32>`). Это главные трансформации
применяющиеся ко всем отдельным трансформациям *Canvas Layer*. Обычно его не
очень используют, но его использует CanvasItem Editor в Godot редакторе.

Трансформация растяжения
------------------------

Наконец, вьюпорты имеют *Stretch Transform*, которая используется для
ресайза или растяжения экрана. Эта трансформация используется внутренне (как
описано в :ref:`doc_multiple_resolutions`), но также может быть задана вручную
для каждого вьюпорта.

События ввода принятое в :ref:`MainLoop._input_event() <class_MainLoop__input_event>`
коллбэк умножается на эту трансформацию, but lack the ones above. 
Для преобразования координат InputEvent в локальные координаты CanvasItem, 
добавлена удобная функция :ref:`CanvasItem.make_input_local() <class_CanvasItem_make_input_local>`.

Порядок трансформаций
---------------------

Для координат в локальных параметрах CanvasItem чтобы они стали действительными
координатами экрана, должна быть применена следующая цепочка преобразований:

.. image:: /img/viewport_transforms2.png

Функции преобразования
----------------------

Получение каждого преобразования может быть достигнуто с помощью следующих функций:

+----------------------------------+--------------------------------------------------------------------------------------+
| Тип                              | Трансформация                                                                        |
+==================================+======================================================================================+
| CanvasItem                       | :ref:`CanvasItem.get_global_transform() <class_CanvasItem_get_global_transform>`     |
+----------------------------------+--------------------------------------------------------------------------------------+
| CanvasLayer                      | :ref:`CanvasItem.get_canvas_transform() <class_CanvasItem_get_canvas_transform>`     |
+----------------------------------+--------------------------------------------------------------------------------------+
| CanvasLayer+GlobalCanvas+Stretch | :ref:`CanvasItem.get_viewport_transform() <class_CanvasItem_get_viewport_transform>` |
+----------------------------------+--------------------------------------------------------------------------------------+

В конце, для конвертирования локальных координат CanvasItem в координаты экрана
, просто умножьте в следующем порядке:

::

    var screen_coord = get_viewport_transform() * ( get_global_transform() * local_pos )

Помните, что обычно не желательно работать с координатами экрана.
Рекомендуемый подход просто работать в координатах Canvas
(``CanvasItem.get_global_transform()``), позволяющих автоматически
масштабировать разрешение экрана для корректной работы.

Подача собственных событий ввода
--------------------------------

Часто бывает желательно передавать пользовательские события ввода в 
дерево сцены. Зная вышесказанное, чтобы сделать это корректно, 
это нужно делать следующим образом:

::

    var local_pos = Vector2(10,20) # local to Control/Node2D
    var ie = InputEvent()
    ie.type = InputEvent.MOUSE_BUTTON
    ie.button_index = BUTTON_LEFT
    ie.pos = get_viewport_transform() * (get_global_transform() * local_pos)
    get_tree().input_event(ie)
