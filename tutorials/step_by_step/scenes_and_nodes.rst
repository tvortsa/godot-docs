.. _doc_scenes_and_nodes:

Сцены и узлы
================

Введение
------------

.. image:: /img/chef.png

Представьте что вы больше не разработчик. Вы шеф-повар. 
Сейчас, вместо создания игр, вы создаете новые деликатесы.

Итак, как повар создает рецепты? Рецепты делятся на два типа вещей:
ингридиенты и инструкции по их приготовлению.
Таким образом любой, следуя рецепту может создать удивительное творение.

Создание игр в Godot очень похоже. Использование движка как кухни.
В этой кухне, *nodes* (узлы) как холодильник наолненный свежими ингридиентами.

Существует много типов узлов, некоторые отображают изображение, другие воспроизводят звук,
а третьи - 3D модели, и т.д. .

Узлы
-----

Но давайте начнем с основ. Узел это базовый элемент для создания игры,
он обладает следующими характеристиками:

-  Имя.
-  редактируемые свойства.
-  может принимать callback для обработки каждый кадр.
-  может быть расширен (получить больше функций).
-  может быть добавлен к другому узлу как потомок.

.. image:: /img/tree.png

Последнее крайне важно. Узлы могут иметь другие узлы в качестве потомков.
Узлы тогда можно представить как **дерево**.

В Godot, возможность расположить узлы таким образом, создает мощный
инструментарий для организации проектов. Поскольку различные узлы обладают
разными функциями, их сочетание позволяет создавать более сложные функции.

Пока это не очень понятно, но важно помнить о том что узлы можно компоновать
таким вот образом.

Сцены
------

.. image:: /img/scene_tree_example.png

Итак концепция узлов обозначена, следующий логический шаг - Сцены.

Сцена состоит из группы узлов организованных иерархически (в виде дерева).
Она имеет несколько особенностей:

-  Сцена всегда имеет только один корневой узел.
-  Сцены можно сохранить на диск и загрузить с диска.
-  Сцены могут быть *инстанцированы* (об этом чуть позже).
-  Запустить игру значит запустить сцену.
-  В проекте может быть много сцен, но для их запуска, должна быть выбрана 
   для загрузки первой.

В сущности, редактор Godot это **редактор сцены**. Он имеет много инструментов
для редактирования 2D и 3D сцен и интерфейса пользователя, но редактор
основан на концепции редактирования сцены и узлов ее составляющих.

Создание нового проекта
----------------------

Теория скучна, перейдем к практике. Следуя давней традиции туториалов,
первый проект назовем Hello World. Для чего используем редактор.

Когда godot запускается вне проекта, появляется Project Manager.
Что помогает управляться с проектами.

.. image:: /img/project_manager.png

Для создания нового проекта, используем опцию "New Project" . 
Выберите путь для проекта и задайте имя проекта:

.. image:: /img/create_new_project.png

Редактор
------

Когда проект "New Project" создан, следующий шаг - открыть его. 
Его откроет Godot редактор. Вот как выглядит только что открытый редактор

opened:

.. image:: /img/empty_editor.png

Как мы упоминали, создание игр в Godot похоже на готовку, 
так что давайте откроем холодильник и добавим свежих нодов в проект.
Начнем с Hello World! Нажмем кнопку "New Node" (выглядит как символ "плюс"):

.. image:: /img/newnode_button.png

Откроется окно Create Node, появится длинный список узлов доступных для создания:

.. image:: /img/node_classes.png

Выберите здесь, узел "Label" . Быстрее всего наверное в поиске:

.. image:: /img/node_search_label.png

И наконец, создайте Label! при нажатии Create происходит много чего:

.. image:: /img/editor_with_label.png

Прежде всего, сцена сменяется на 2D редактор (поскольку Label это
узел 2D типа), и появляется Label, выделенная, в левом верхнем углу 
вьюпорта.

Узел появляется в дереве сцены редактора (прямоугольник в левом верхнем углу), 
а свойства label появляются в Inspector (прямоугольник справа).

Следующий шаг - изменить свойство "Text" у label, заменим его на "Hello, World!":

.. image:: /img/hw.png

Ok, все готово к запуску сцены! Пажмите кнопку PLAY SCENE сверху (или F6):

.. image:: /img/playscene.png

Ииииии... Упс.

.. image:: /img/neversaved.png

Сцены нужно сохранить перед запуском, сохраним сцену как
hello.scn in Scene -> Save:

.. image:: /img/save_scene.png

И здесь происходит кое что занятное. Окно сохранения файла особенное, 
и позвляет сохрянять файлы только внутри проектаand. Корневая папка проекта -
 "res://" что значит "путь к ресурсам". Что значит что файлы могут быть 
 сохранены только внутри проекта. На будущее, работая с файлами в Godot,
помните, что "res://" это путь к ресурсам, платформа и место установки
значения не имеют, это то где храняться все ресурсы игры.

После сохранения сцены и нажатия на run scene снова, демо "Hello, World!"
наконец должно выполниться:

.. image:: /img/helloworld.png

Отлично!

.. _doc_scenes_and_nodes-configuring_the_project:

Конфигурация проекта
-----------------------

Ok, давайте немного конфигурируем проект. Пока единственный способ выполнить
что-то это запустить текущую сцену. Проекты, однако, могут иметь множество сцен
так что одна из них должна быть выбрана как главная - main scene. 
Эта (и только эта) сцена будет загружена при запуске проекта.

Все настройки сохраняются в файле engine.cfg , в обычном текстовом формате
win.ini, для простоты редактирования. Есть десятки настроек которые можно менять
в этом файле для настройки того как проект будет запускаться,
чтобы все упростить, есть окно настройки проекта, своего рода интерфейс для 
редактирования engine.cfg

Открыть это окно просто, перейдите в Scene -> Project Settings.

Когда окно откроется, task выделятся в main scene. Это можно сделать проще
изменяя свойства application/main_scene и выбрав 'hello.scn'.

.. image:: /img/main_scene.png

С этими изменениями, нажатие кнопки Play (или F5) запустит проект, 
вне зависимости от того какая сцена будет редактироваться.

Вернитесь в окно project settings. Это окно предоставляет множество опций
которые можно добавить к engine.cfg, и показывает их дефолтные значения.
Если дефолтные значения вас устраивают, то не меняйте их.

При изменении значений, tick появится слева от имени.
Что значит что свойство было сохранено в файл engine.cfg.

В качестве примечания, на будущее (в конце концов это первый урок!), 
можно добавлять и собственные свойства конфигурации и читать их потом
в run-time используя
:ref:`Globals <class_Globals>` синглтон.

продолжение следует...
------------------

В этом уроке мы поговорили о "узлах и сценах", but so far there has been
only *one* scene and *one* node! Don't worry, the next tutorial will
deal with that...
