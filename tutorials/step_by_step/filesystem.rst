.. _doc_filesystem:

Файловая система
==========

Введение
------------

Файловые системы это еще одна горячая тема в разработке движков. Файловая система
управляет хранением активов, и доступом к ним.
Хорошо спроектированные файловые системы также позволяют нескольким разработикам
сообща редактировать файлы ресурсов и активы при совместной работе.

Начальные версии Godot движка (и предыдущие итерации до того как он стал называться Godot)
использовали базу данных. Активы сохранялись в ней и получали ID.
Пробовались и другие подходы, такие как локальные базы данных, файлы с метаданными
и т.п.. В конце концов победила простота и теперь Godot хранит все активы
как файлы в файловой системе.

Реализация
--------------

Файловая система хранит ресурсы на диске. Все, от скрипта до сцены или 
PNG изображения это ресурсы с точки зрения движка. Если ресурс содержит свойства
которые ссылаются на другие ресурсы на диске пути к этим ресурсам также включаются.
Если ресурс имеет под-ресурс встроенный в него, то ресурс сохраняется в
одном файле вместе со всеми под-ресурсами. 
Например, ресурс шрифт часто комплектуют в сборку с font textures.

Обычно Godot в файловой системе избегает метаданных в файлах. Причина проста,
существующие менеджеры активов и VCSs просто намного лучше чем
все то что мы могли бы реализовать, так что Godot пытается работать совместно
с SVN, Git, Mercurial, Perforce, и т.п.

Пример файловой системы:

::

    /engine.cfg
    /enemy/enemy.scn
    /enemy/enemy.gd
    /enemy/enemysprite.png
    /player/player.gd
    
engine.cfg
----------

Файл engine.cfg это описание проекта, он всегда находится в корневой папке проекта.
Фактически его местоположение определяет, где корень. Это первый файл, который ищет Godot
при открытии проекта.

Этот файл содержит конфигурацию проекта в plain text, используя формат win.ini.
Даже пустой engine.cfg может выполнять функцию инициализации пустого проекта.

символ - разделитель
-------------------

Godot поддерживает только ``/`` в качестве разделителя пути. 
Это так по причинам портируемости. Все операционные системы его поддерживают,
даже Windows, так path типа ``c:\project\engine.cfg`` должен быть заисан как
``c:/project/engine.cfg``.

Resource path
-------------

При обращении к ресурсам, использование файловой системы операционной системы
может быть громоздко и непортируемо. Для решения этой проблемы, введен специальный путь
``res://``.

Путь ``res://`` всегда указывает на project root (где расположен
engine.cfg, так что фактически ``res://engine.cfg`` всегда валиден).

Эта ФС всегда read-write только если проект запущен локально из редактора.
При экспорте или запуске на другом устройстве (консоли или телефоне
или с DVD), файловая система станет доступной только для чтения и запись
больше не будет разрешена.

User path
---------

Writing to disk is often still needed for various tasks such as saving game
state or downloading content packs. To this end, the engine ensures that there is a
special path ``user://`` он всегда доступен для записи.

Host file system
---------------

Alternatively host file system paths can also be used, but this is not recommended
for a released product as these paths are not guaranteed to work on all platforms.
However, using host file system paths can be very useful when writing development
tools in Godot!

Недостатки
---------

В этом простом файловом дизайне есть и недостатки. Первая проблема
связана с перемещением активов (переименование и перемещение их внутри проекта
из одного пути в другой) разрушает существующие ссылки на активы. Эти ссылки нужно
переопределять на новое положение активов.

Вторая в том что в Windows и OSX имена путей и файлов регистро-зависимы.
Если разработчик работает в регистро-независимой системе и у него актив типа "myfile.PNG",
но ссылка на "myfile.png", то это сработает в его системе но не в других,
таких как Linux, Android, и т.п.. This may also apply to exported binaries,
which use a compressed package to store all files.

It is recommended that your team clearly defines a naming convention for files when
working with Godot! Одно простое правило - защита от дурака: использовать **только** маленькие
символы в именах активов.
